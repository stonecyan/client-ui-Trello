{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ClientTaskList","props","className","tasks","map","task","index","key","onClick","completeTask","App","state","clientTasks","bind","boardId","url","axios","get","then","response","mapTaskLists","data","i","taskLists","Map","length","set","id","name","j","clientTaskIds","labels","idList","push","clientIds","urls","clientId","taskList","clientIdTask","taskId","this","setState","prevState","newState","put","trelloResponse","getTaskLists","getTasks","filterClientTasks","clientIdData","getClientTasks","clientTaskData","mapClientTasks","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7db57818.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios'\nimport './App.css';\n\nfunction ClientTaskList(props){\n  return(\n    <div>\n      <h3>Client Tasks</h3>\n      <ul className=\"taskList\">\n        {props.tasks.map((task, index) =>(\n          <li key={index} className=\"tasks\">\n            <span className={task[3]}>{task[1]}</span>\n            <button onClick={() => props.completeTask(task[0], index)}>Complete</button>\n            <br />\n            <span className=\"list\">{task[2]}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props)\n      this.state={\n        clientTasks: []\n      }\n    this.completeTask = this.completeTask.bind(this);\n  }\n  getTaskLists(boardId){\n    var apiKey = \"6b4bfdf2a878cdd5935ad1f89b19b828\";\n    var oauthToken = \"2222c8bc7d6190a34eda3cfa77d8444954447c042cfb6e6609df5e21e536888e\";\n    var boardID = boardId\n    var url = `https://api.trello.com/1/boards/${boardID}/lists?key=${apiKey}&token=${oauthToken}`;\n    return axios.get(url).then((response) => this.mapTaskLists(response.data))\n  }\n\n  mapTaskLists(data){\n    var taskLists = new Map()\n    var i;\n    for (i=0; i<data.length; i++){\n      taskLists.set(data[i].id, data[i].name)\n    }\n    return taskLists\n  }\n\n  getTasks(boardId){\n    var apiKey = \"6b4bfdf2a878cdd5935ad1f89b19b828\";\n    var oauthToken = \"2222c8bc7d6190a34eda3cfa77d8444954447c042cfb6e6609df5e21e536888e\";\n    var boardID = boardId\n    var url = `https://api.trello.com/1/boards/${boardID}/cards?key=${apiKey}&token=${oauthToken}`;\n    return axios.get(url)\n\n  }\n\n  filterClientTasks(data){\n    var i;\n    var j;\n    var clientTaskIds = []\n    for (i=4; i<data.length; i++){\n      for (j=0; j<data[i].labels.length; j++){\n        if (data[i].labels[j].name===\"CLIENT\" && data[i].idList!==\"5d6ee5ce0766e112671af869\"){\n          clientTaskIds.push([data[i].id,data[i].idList])\n        }\n      }\n    }\n    return clientTaskIds\n  }\n\n  getClientTasks(clientIds){\n    var apiKey = \"6b4bfdf2a878cdd5935ad1f89b19b828\";\n    var oauthToken = \"2222c8bc7d6190a34eda3cfa77d8444954447c042cfb6e6609df5e21e536888e\";\n    var i;\n    var urls=''\n    for (i=0; i<clientIds.length; i++){\n      urls+=`/cards/${clientIds[i][0]}/name`\n      if (i<clientIds.length-1){\n        urls+=\",\"\n      }\n    }\n    var url=`https://api.trello.com/1/batch/?urls=${urls}&key=${apiKey}&token=${oauthToken}`\n    return axios.get(url).then((response)=> response.data)\n\n  }\n\n  mapClientTasks(clientId, clientTasks, taskList){\n    var i;\n    var clientIdTask = []\n    for (i=0; i<clientId.length; i++){\n      clientIdTask.push([clientId[i][0],clientTasks[i][200],taskList.get(clientId[i][1]),\"incomplete\"])\n    }\n    return clientIdTask\n  }\n\n  completeTask(taskId, i){\n    var index = i\n    this.setState((prevState)  => {\n        var newState = prevState\n        newState[\"clientTasks\"][index][3]=\"complete\"\n        return {newState}\n      }\n    )\n    var apiKey = \"6b4bfdf2a878cdd5935ad1f89b19b828\";\n    var oauthToken = \"2222c8bc7d6190a34eda3cfa77d8444954447c042cfb6e6609df5e21e536888e\";\n    var url = `https://api.trello.com/1/cards/${taskId}/idList?value=5d6ee5ce0766e112671af869&key=${apiKey}&token=${oauthToken}`\n    axios.put(url)\n\n    }\n\n  componentDidMount(){\n    var trelloResponse;\n    var clientTaskIds;\n    var taskLists;\n    var boardID = \"cCf3tlXC\";\n    this.getTaskLists(boardID).then((response) => taskLists = response).then(() => this.getTasks(boardID)).then((response) => trelloResponse=response.data).then(() => this.filterClientTasks(trelloResponse)).then((clientIdData) => clientTaskIds = clientIdData).then(() => this.getClientTasks(clientTaskIds)).then((clientTaskData)=> this.setState({\n        clientTasks: this.mapClientTasks(clientTaskIds, clientTaskData, taskLists)\n      })\n      )\n\n  }\n\n  render(){\n    return (\n      <div>\n        <ClientTaskList\n          tasks={this.state.clientTasks}\n          completeTask={this.completeTask}\n        />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}